(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{308:function(t,s,n){"use strict";n.r(s);var e=n(10),a=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"github-actions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#github-actions"}},[t._v("#")]),t._v(" Github Actions")]),t._v(" "),s("p",[t._v("ci 的流程和解释如下所示：")]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前的 yml（.yaml） 文件是一个 workflow，必须放置在项目的 .github/workflow 目录下")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# name: 当前 workflow 的名称")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ci\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# on:  指定 workflow 触发的 event")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#      event 有以下几种类型")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         - webhook")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         - scheduled")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         - manual")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# push: 一个 webhook event，用于提交代码时触发 workflow，也可以是触发列表，例如 [push, pull_request]")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#        workflows 触发的 event 大部分是基于 webhook 配置，以下列举几个常见的 webhook:")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#           - delete:  删除一个 branch 或 tag 时触发")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#           - fork / watch:  某人 fork / watch 项目时触发（你问有什么用，发送邮件通知不香吗？）")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#           - pull_request:  提交 PR 时触发")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#           - page_build:  提交 Github Pages-enabled 分支代码时触发")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#           - push:  提交代码到特定分支时触发")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#           - registry_package:  发布或跟新 package 时触发")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#           更多 webhook 可查看 https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#           从这里可以看出 Git Actions 的一大特点就是 Gihub 官方提供的一系列 webhook")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# branches: 指定 push 触发的特定分支，这里你可以通过列表的形式指定多个分支")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branches")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" demo/"),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" feat/"),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" fix/"),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# branches 的指定可以是通配符类型，例如以下配置可以匹配 refs/heads/releases/10")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - 'releases/**'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# branches 也可以使用反向匹配，例如以下不会匹配 refs/heads/releases/10")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - '!releases/**'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# branches-ignore:  用于指定当前 webhook 不触发的分支")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tags:  用于指定当前 webhook 触发的 tag")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tags:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - v1             # Push events to v1 tag")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - v1.*           # Push events to v1.0, v1.1, and v1.9 tags")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tags-ignore:  类似于 branches-ignore")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# paths、paths-ignore...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更多关于特定过滤模式可查看 https://docs.github.com/zh/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 其他的 webhook 控制项还包括 types（不是所有的 webhook 都有 types），例如已 issues 为例，可以在 issues 被 open、reopened、closed 等情况下触发 workflow")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更多 webhook 的 types 可查看 https: //docs.github.com/en/actions/reference/events-that-trigger-workflows#webhook-events")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# on:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   issues:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     types:  [opened, edited, closed]")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 除此之外如果对于每个分支有不同的 webhook 触发，则可以通过以下形式进行多个 webhook 配置")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# push:")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   branches:")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     - master")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# pull_request:")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   branches:")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     - dev")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 除了以上所说的 webhook event，还有 scheduled event 和 manual event")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# scheduled event:  用于定时构建，例如最小的时间间隔是 5 min 构建一次")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 具体可查看 https: //docs.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# env: 指定所有 job 和 step 通用的环境变量（在 job 中或者 steps 中也可以通过 env 配置自己的环境变量）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# defaults: 当前所有 job 的默认配置")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# jobs: 一个 workflow 由一个或多个 job 组成")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# job id: 是 job 的唯一标识，可以通过 _ 进行连接，例如:  my_first_job，例如这里的 test 就是一个 job id")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# name: 在 Github 中显示的 job 名称")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CI 执行流程\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# needs: 用于继发执行 job，例如当前 job build 必须在 job1 和 job2 都执行成功的基础上执行")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# jobs:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   job1:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   job2:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     needs: job1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   job3:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     needs: [job1, job2]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# runs-on: job 运行的环境配置，包括:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - windows-latest")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - windows-2019")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ubuntu-20.04")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ubuntu-latest")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ubuntu-18.04")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ubuntu-16.04")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - macos-latest")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - macos-10.15")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - self-hosted（本地机器，具体可查看 https://docs.github.com/zh/actions/hosting-your-own-runners/managing-self-hosted-runners/using-self-hosted-runners-in-a-workflow）")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("runs-on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("latest\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# outputs:  用于输出信息")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# env:  用于设置当前 job 的环境变量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# defaults:  当前所有 step 的默认配置")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if: 满足条件执行当前 job")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# steps:  一个 job 由多个 step 组成，step 可以")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - 执行一系列 tasks")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - 执行命令")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - 执行 action")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - 执行公共的 repository")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - 在 Docker registry 中的 action")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# id: 类似于 job id")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if:  类似于 job if")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# name:  当前 step 的名字")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 下载 Github 仓库\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# uses: 用于执行 action")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       action: 可以重复使用的单元代码")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#          - 为了 workflow 的安全和稳定建议指定 action 的发布版本或 commit SHA")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#          - 使用指定 action 的 major 版本，这样可以允许你接收 fixs 以及 安全补丁并同时保持兼容性")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#          - 尽量不建议使用 master 版本，因为 master 很有可能会被发布新的 major 版本从而破坏了 action 的兼容性")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#          - action 可能是 JavaScript 文件或 Docker 容器，如果是 Docker 容器，那么 runs-on 必须指定 Linux 环境")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         指定固定 commit SHA")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         uses:  actions/setup-node@74bc508")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         指定一个 major 发布版本")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         uses:  actions/setup-node@v1")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         指定一个 minor 发布版本")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         uses:  actions/setup-node@v1.2")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         指定一个分支")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         uses:  actions/setup-node@master")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         指定一个 Github 仓库子目录的特定分支、ref 或 SHA")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         uses:  actions/aws/ec2@master")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         指定当前仓库所在 workflows 的目录地址")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         uses:  ./.github/actions/my-action")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         指定在 Dock Hub 发布的 Docker 镜像地址")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         uses:  docker://alpine: 3.8")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         A Docker image in a public registry")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         uses:  docker:/gcr.io/cloud-builders/gradle")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# checkout action 主要用于向 github 仓库拉取源代码（需要注意 workflow 是运行在服务器上，因此需要向远程的 github 拉取仓库源代码）")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 它的功能包括但不限于")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Fetch all history for all tags and branches")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Checkout a different branch")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Checkout HEAD^")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Checkout multiple repos (side by side)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Checkout multiple repos (nested)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Checkout multiple repos (private)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Checkout pull request HEAD commit instead of merge commit")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Checkout pull request on closed event")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Push a commit using the built-in token")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# checkout action: https: //github.com/actions/checkout")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" actions/checkout@v4\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# with: action 提供的输入参数")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# with:")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   指定 checkout 的分支、tag 或 SHA")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   如果默认不指定，则指向触发工作流所在分支的 SHA")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   更多 checkout action 的配置可查看 https://github.com/actions/checkout#usage")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   ref: feat/ci")]),t._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# run: 使用当前的操作系统的默认的 non-login shell 执行命令行程序")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行单个脚本")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# run: npm install")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行多个脚本")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# run: |")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n      #   npm ci\n      #   npm run build\n      #\n      # working-directory: 用于指定当前脚本运行的目录\n      # working-directory: ./temp\n      #\n      # shell: 可以指定 shell 类型进行执行，例如 bash、pwsh、python、sh、cmd、powershell\n      # shell: bash\n      #\n      # env: 除了可以设置 workflow 以及 job 的 env，也可以设置 step 的 env（可以理解为作用域不同，局部作用域的优先级更高）\n      #\n      # comtinue-on-error: 默认当前 step 失败则会阻止当前 job 继续执行，设置 true 时当前 step 失败则可以跳过当前 job 的执行")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - name: 缓存 node_modules 依赖")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     # cache action: https://github.com/actions/cache")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     # cache 在这里主要用于缓存 npm，提升构建速率")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     uses: actions/cache@v3")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     # npm 缓存的路径可查看 https://docs.npmjs.com/cli/cache#cache")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     # 由于这里 runs-on 是 ubuntu-latest，因此配置 ~/.npm")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     with:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       # 指定缓存和还原的路径")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       path: ~/.npm")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       # key 中定义缓存标志，runner.os 指当前环境的系统。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       # 这里使用 package-lock.json 的内容生成 Hash 值作为缓存的 key 值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       # 一旦 package-lock.json 发生变化，则会导致 Hash 值变化，从而变更缓存内容")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       # 备用 key，如果 key 没有命中缓存，则可以使用 restore-keys 进行备用缓存匹配")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       restore-keys: |")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n    #         ${{ runner.os }}-node-")]),t._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# github-script action: https://github.com/actions/github-script")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 workflow 中使用 Script 语法调用 Github API 或引用 workflow context")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - uses: actions/github-script@v6")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     id: my-script")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     with:")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         result-encoding: string")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         retries: 3")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         script: |")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n      #         github.rest.issues.get({\n      #             issue_number: context.issue.number,\n      #             owner: context.repo.owner,\n      #             repo: context.repo.repo,\n      #         })")]),t._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# setup-node action: https://github.com/actions/setup-node")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置 Node 执行环境（当前构建的服务器默认没有 Node 环境，可以通过 Action 安装 Node）")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要注意安装 Node 的同时会捆绑安装 npm，如果想了解为什么会捆绑，可以 Google 一下有趣的故事哦")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因此使用了该 action 后就可以使用 npm 的脚本在服务器进行执行啦")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 下载和安装 Node 环境\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" actions/setup"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("node@v3\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("with")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 在 package.json 的 engines 中我们配置了  "node": ">=16.18.1"')]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因此这里对安装的 Node 进行版本限定")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("node-version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"16.x"')]),t._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 安装依赖\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要注意 npm ci 和 npm i 的区别")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" npm ci\n\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 代码校验\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" npm run lint\n\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 单元测试\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" npm test\n\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 文档构建\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" npm run docs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("build\n\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 代码构建\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" npm run build\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# timeout-minutes: 一个 job 执行的最大时间，默认是 6h，如果超过时间则取消执行")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# strategy.matrix: 例如指定当前 job 的 node 版本列表、操作系统类型列表等")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# strategy.fail-fast")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# strategy.max-parallel")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# continue-on-error:  一旦当前 job 执行失败，那么 workflow 停止执行。设置为 true 可以跳过当前 job 执行")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# container: Docker 容器配置，包括 image、env、ports、volumes、options 等配置")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# services: 使用 Docker 容器 Action 或者 服务 Action 必须使用 Linux 环境运行")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);